//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Xpo.Helpers;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using System.Linq;
using ProtecTelegram.DataLayer.Database;
namespace ProtecTelegram.DataLayer.Database
{
	internal class ConfigureJsonOptions : IConfigureOptions<JsonOptions>, IServiceProvider
	{
		private readonly IHttpContextAccessor _httpContextAccessor;
		private readonly IServiceProvider _serviceProvider;

		public ConfigureJsonOptions(
			 IHttpContextAccessor httpContextAccessor,
			 IServiceProvider serviceProvider)
		{
			_httpContextAccessor = httpContextAccessor;
			_serviceProvider = serviceProvider;
		}

		public void Configure(JsonOptions options)
		{
			options.JsonSerializerOptions.Converters.Add(new PersistentBaseConverterFactory(this));
		}

		public object GetService(Type serviceType)
		{
			return (_httpContextAccessor.HttpContext?.RequestServices ?? _serviceProvider).GetService(serviceType);
		}
	}

	public class XpoMetadataProvider : DefaultModelMetadataProvider
	{
		public XpoMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider) : base(detailsProvider)
		{

		}
		public XpoMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider, IOptions<MvcOptions> optionsAccessor) : base(detailsProvider, optionsAccessor)
		{

		}
		protected override DefaultMetadataDetails[] CreatePropertyDetails(ModelMetadataIdentity key)
		{
			DefaultMetadataDetails[] result = base.CreatePropertyDetails(key);
			if (typeof(PersistentBase).IsAssignableFrom(key.ModelType))
				return result.Where(x => !IsServiceField(x.Key)).ToArray();
			else
				return result;
		}
		static bool IsServiceField(ModelMetadataIdentity identity)
		{
			Type declaringType = identity.PropertyInfo.DeclaringType;
			return declaringType == typeof(PersistentBase)
				 || declaringType == typeof(XPBaseObject);
		}
	}
}
namespace Microsoft.Extensions.DependencyInjection
{
	public static class DatabaseSystemTextJsonExtensions
	{
		public static IServiceCollection AddDatabaseJsonOptions(this IServiceCollection builder)
		{
			builder.AddHttpContextAccessor();
			builder.ConfigureOptions<ConfigureJsonOptions>();
			builder.AddSingleton(typeof(IModelMetadataProvider), typeof(XpoMetadataProvider));
			return builder;
		}
	}
}
